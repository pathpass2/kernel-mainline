name: Build master-rk3566-tspi.img

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  ARCH: arm64
  #linux替换自己的仓库名称
  src_path: /home/runner/work/linux/linux
  modules_path: /home/runner/work/linux/linux/modules/lib/modules
  

  

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          # 关键：保留文件权限
          persist-credentials: false

      - name: Fix Script Permissions
        run: |
          find . -type f -name "*.sh" -exec chmod +x {} \;
          find . -type f -name "mkimg" -exec chmod +x {} \;
          find . -type f -name "resource_tool" -exec chmod +x {} \;
          find . -type f -name "mkbootimg" -exec chmod +x {} \;
          chmod +x ./scripts/*
          
      

      - name: Install Latest LZ4
        run: |
          # 从 GitHub 下载最新版 LZ4
          LZ4_LATEST=$(curl -s https://api.github.com/repos/lz4/lz4/releases/latest | grep 'tarball_url' | cut -d\" -f4)
          wget $LZ4_LATEST -O lz4-latest.tar.gz
          tar -xzf lz4-latest.tar.gz
          cd lz4-lz4-*
          make -j$(nproc)
          sudo make install
          sudo ldconfig
          lz4 --version

          
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            device-tree-compiler \
            u-boot-tools \
            libssl-dev \
            bc \
            flex \
            bison \
            libncurses-dev \
            initramfs-tools \
            busybox-static
          sudo -E apt-get -y install $(curl -fsSL https://tinyurl.com/ubuntu2204-build-armbian)

      - name: Setup ARM Toolchain
        run: |
          wget https://developer.arm.com/-/media/Files/downloads/gnu/14.2.rel1/binrel/arm-gnu-toolchain-14.2.rel1-x86_64-aarch64-none-linux-gnu.tar.xz
          tar xf arm-gnu-toolchain-14.2.rel1-x86_64-aarch64-none-linux-gnu.tar.xz
          echo "$(pwd)/arm-gnu-toolchain-14.2.rel1-x86_64-aarch64-none-linux-gnu/bin" >> $GITHUB_PATH

      - name: Get Kernel Version
        run: |
          # 获取内核版本号
          echo "kernel_main_version=$(make kernelversion)" >> $GITHUB_ENV

      - name: Set armbian_path
        run: |
          echo "armbian_path=${{ env.src_path }}/armbian_boot" >> $GITHUB_ENV
          echo "armbian_init_path=${{ env.src_path }}/armbian_initrd" >> $GITHUB_ENV
          echo "dtb_path=${{ env.src_path }}/dtbs" >> $GITHUB_ENV

      - name: Build Kernel
        run: |
          make ARCH=$ARCH CROSS_COMPILE=aarch64-none-linux-gnu-  tspi_defconfig
          make ARCH=$ARCH CROSS_COMPILE=aarch64-none-linux-gnu-  rk3566-lckfb-tspi.img  -j$(nproc)
          make ARCH=$ARCH CROSS_COMPILE=aarch64-none-linux-gnu-  modules_install  INSTALL_MOD_PATH=${{ env.src_path }}/modules
          echo "${{ env.kernel_main_version }}"
          echo  "查看编译好的boot.img"
          ls -lh boot.img
          echo "重命名boot.img为rk3566-lckfb-tspi-boot-${{ env.kernel_main_version }}.img"
          mv   boot.img  rk3566-lckfb-tspi-boot-${{ env.kernel_main_version }}.img
          ls  -lh       rk3566-lckfb-tspi-boot-${{ env.kernel_main_version }}.img          
          echo "当前所在编译路径：$(pwd)"
          # 打包模块
          cd  ${{ env.modules_path }}
          echo "进入modules路径：${{ env.modules_path }}"

          echo  "查看modules"
          ls
          echo "${{ env.kernel_main_version }}"
          echo "查看模块详情"
          ls -l ${{ env.kernel_main_version }}
          echo "打包modules"
          tar -zcf ${{ env.kernel_main_version }}-modules.tar.gz   ${{ env.kernel_main_version }}
          echo "查看打包的modules.tar.gz"
          ls  -l
     
      
      - name: Build Kernel-headers
        run: |
          # 制作linux-headers头文件
          mkdir  ${{ env.src_path }}/linux-headers-${{ env.kernel_main_version }}
          cp -a  Module.symvers      ${{ env.src_path }}/linux-headers-${{ env.kernel_main_version }}/
          cp -a  Makefile           ${{ env.src_path }}/linux-headers-${{ env.kernel_main_version }}/
          cp -a  scripts            ${{ env.src_path }}/linux-headers-${{ env.kernel_main_version }}/
          mkdir -p                   ${{ env.src_path }}/linux-headers-${{ env.kernel_main_version }}/arch/arm64
          cp -a arch/arm64/include    ${{ env.src_path }}/linux-headers-${{ env.kernel_main_version }}/arch/arm64/include
          cp -a arch/arm64/kvm          ${{ env.src_path }}/linux-headers-${{ env.kernel_main_version }}/arch/arm64/kvm 
          cp -a arch/arm64/Makefile      ${{ env.src_path }}/linux-headers-${{ env.kernel_main_version }}/arch/arm64/Makefile
          cp -a include                  ${{ env.src_path }}/linux-headers-${{ env.kernel_main_version }}/
          cp -a .config                 ${{ env.src_path }}/linux-headers-${{ env.kernel_main_version }}/
          cd ${{ env.src_path }}
          tar -zcf  ${{ env.src_path }}/linux-headers-${{ env.kernel_main_version }}.tar.gz   linux-headers-${{ env.kernel_main_version }}
          echo "当前所在路径：$(
          echo "查看打包的linux-headers-${{ env.kernel_main_version }}.tar.gz"
          ls  -lh ${{ env.src_path }}/linux-headers-${{ env.kernel_main_version }}.tar.gz          

      - name: Compression_boot_files
        run: |
          mkdir ${{ env.src_path }}/boot_files
          cd ${{ env.src_path }}/boot_files
          mv ${{ env.src_path }}/linux-headers-${{ env.kernel_main_version }}.tar.gz  .
          mv ${{ env.modules_path }}/${{ env.kernel_main_version }}-modules.tar.gz   .
          mv ${{ env.src_path }}/rk3566-lckfb-tspi-boot-${{ env.kernel_main_version }}.img  .
          tar -zcvf rk3566-tspi-${{ env.kernel_main_version }}.tar.gz   * 
          

      - name: Upload Kernel to Release  master
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.ref_name || format('v{0}', env.kernel_main_version) }}
          name: "Kernel ${{ env.kernel_main_version }}"          
          artifacts: |
            ${{ env.src_path }}/boot_files/rk3566-tspi-${{ env.kernel_main_version }}.tar.gz          
          body: |
            master  主线最新版本，不一定能稳定使用。设备树默认是ap6255的WiFi模块
            tag：  ${{ github.event.inputs.target_tag }}
            Kernel version: ${{ env.kernel_main_version }}
            rk3566-lckfb-tspi-ap6255
            rk3566-tspi-${{ env.kernel_main_version }}.tar.gz     解压缩后，通过瑞芯微刷机工具刷入
            armbian_boot-${{ env.kernel_main_version }}.tar.gz    用于更新armbian内核的压缩包，解压缩后自行替换压缩包里面的文件到相应路径
          draft: false
          prerelease: false
          allowUpdates: true
          replaceArtifacts: false
