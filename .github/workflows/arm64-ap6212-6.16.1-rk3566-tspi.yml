name: Build arm64_ap6212_6.16.1rk3566-tspi.img

on:
  workflow_dispatch:
    inputs:
      target_tag:
        description: 'Source tag to build from'
        required: true
        default: 'v6.16.1'
        

env:
  ARCH: arm64
  src_path: /home/runner/work/linux/linux
  modules_path: /home/runner/work/linux/linux/modules/lib/modules
  initramfs_conf: /etc/initramfs-tools/update-initramfs.conf
  corss_compile: aarch64-none-linux-gnu-
  

  

jobs:
  build:
    runs-on: ubuntu-22.04-arm
    steps:
      - name: Checkout source tag
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.target_tag }}
          submodules: true
          fetch-depth: 0
          # 关键：保留文件权限
          persist-credentials: false

      - name: Fix Script Permissions
        run: |
          find . -type f -name "*.sh" -exec chmod +x {} \;
          find . -type f -name "mkimg" -exec chmod +x {} \;
          find . -type f -name "resource_tool" -exec chmod +x {} \;
          find . -type f -name "mkbootimg" -exec chmod +x {} \;
          chmod +x ./scripts/*
          
      

      - name: Install Latest LZ4
        run: |
          # 从 GitHub 下载最新版 LZ4
          LZ4_LATEST=$(curl -s https://api.github.com/repos/lz4/lz4/releases/latest | grep 'tarball_url' | cut -d\" -f4)
          wget $LZ4_LATEST -O lz4-latest.tar.gz
          tar -xzf lz4-latest.tar.gz
          cd lz4-lz4-*
          make -j$(nproc)
          sudo make install
          sudo ldconfig
          lz4 --version

          
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            device-tree-compiler \
            u-boot-tools \
            libssl-dev \
            bc \
            flex \
            bison \
            libncurses-dev \
            initramfs-tools \
            busybox-static
          sudo -E apt-get -y install $(curl -fsSL https://tinyurl.com/ubuntu2204-build-armbian)

      - name: Setup ARM Toolchain
        run: |
          wget  https://developer.arm.com/-/media/Files/downloads/gnu/14.2.rel1/binrel/arm-gnu-toolchain-14.2.rel1-aarch64-aarch64-none-linux-gnu.tar.xz
          tar xf  arm-gnu-toolchain-14.2.rel1-aarch64-aarch64-none-linux-gnu.tar.xz
          echo  "$(pwd)/arm-gnu-toolchain-14.2.rel1-aarch64-aarch64-none-linux-gnu/bin" >> $GITHUB_PATH


       
      - name: Get Kernel Version
        run: |
          # 获取内核版本号
          echo "kernel_main_version=$(make kernelversion)" >> $GITHUB_ENV


      - name: Set armbian_path
        run: |
          echo "armbian_path=${{ env.src_path }}/armbian_boot" >> $GITHUB_ENV
          echo "armbian_init_path=${{ env.src_path }}/armbian_initrd" >> $GITHUB_ENV
          echo "dtb_path=${{ env.src_path }}/dtbs" >> $GITHUB_ENV
          echo   "cc=${{env.corss_compile}}gcc"  >> $GITHUB_PATH
          echo   "lld=${{env.corss_compile}}ld.bfd"  >> $GITHUB_PATH
          
          
      - name: Build Kernel
        run: |
          mkdir -p  ${{ env.armbian_init_path }}
          make ARCH=$ARCH CROSS_COMPILE=${{env.corss_compile}}  tspi_defconfig
          #make ARCH=$ARCH CROSS_COMPILE=${{env.corss_compile}}    olddefconfig
          make ARCH=$ARCH CROSS_COMPILE=${{env.corss_compile}} CC=${{env.cc}} LD=${{env.lld}}  dtbs
          make ARCH=$ARCH CROSS_COMPILE=${{env.corss_compile}} CC=${{env.cc}} LD=${{env.lld}}  rk3566-lckfb-tspi.img  -j$(nproc)
          make ARCH=$ARCH CROSS_COMPILE=${{env.corss_compile}} CC=${{env.cc}} LD=${{env.lld}}  modules_install  INSTALL_MOD_PATH=${{ env.src_path }}/modules
          echo "${{ env.kernel_main_version }}"
          echo  "查看编译好的boot.img"
          ls -lh boot.img
          echo "重命名boot.img为rk3566-lckfb-tspi-boot-${{ env.kernel_main_version }}.img"
          mv boot.img  rk3566-lckfb-tspi-boot-${{ env.kernel_main_version }}.img
          ls  -lh      rk3566-lckfb-tspi-boot-${{ env.kernel_main_version }}.img          
          echo "当前所在编译路径：$(pwd)"
          # 打包模块
          cd  ${{ env.modules_path }}
          echo "进入modules路径：${{ env.modules_path }}"

          echo  "查看modules"
          ls
          echo "${{ env.kernel_main_version }}"
          echo "查看模块详情"
          ls -lh ${{ env.kernel_main_version }}
          echo "打包modules"
          tar -zcvf ${{ env.kernel_main_version }}-modules.tar.gz   ${{ env.kernel_main_version }}
          echo "查看打包的modules.tar.gz"
          ls  -lh
     
      
      - name: Build Kernel-headers
        run: |
          # 制作linux-headers头文件
          mkdir  ${{ env.src_path }}/linux-headers-${{ env.kernel_main_version }}
          cp -a  Module.symvers      ${{ env.src_path }}/linux-headers-${{ env.kernel_main_version }}/
          cp -a  Makefile           ${{ env.src_path }}/linux-headers-${{ env.kernel_main_version }}/
          cp -a  scripts            ${{ env.src_path }}/linux-headers-${{ env.kernel_main_version }}/
          mkdir -p                   ${{ env.src_path }}/linux-headers-${{ env.kernel_main_version }}/arch/arm64
          cp -a arch/arm64/include    ${{ env.src_path }}/linux-headers-${{ env.kernel_main_version }}/arch/arm64/include
          cp -a arch/arm64/kvm          ${{ env.src_path }}/linux-headers-${{ env.kernel_main_version }}/arch/arm64/kvm 
          cp -a arch/arm64/Makefile      ${{ env.src_path }}/linux-headers-${{ env.kernel_main_version }}/arch/arm64/Makefile
          cp -a include                  ${{ env.src_path }}/linux-headers-${{ env.kernel_main_version }}/
          cp -a .config                 ${{ env.src_path }}/linux-headers-${{ env.kernel_main_version }}/
          cd ${{ env.src_path }}
          tar -zcvf  ${{ env.src_path }}/linux-headers-${{ env.kernel_main_version }}.tar.gz   linux-headers-${{ env.kernel_main_version }}
          echo "当前所在路径：$(pwd)"
          echo "查看打包的linux-headers-${{ env.kernel_main_version }}.tar.gz"
          ls  -lh ${{ env.src_path }}/linux-headers-${{ env.kernel_main_version }}.tar.gz
          
     

      - name: edit dtb
        run: | 
          mkdir -p ${{ env.dtb_path }}/dtb/rockchip
          echo "查看未修改前的dtb"
          ls -lh  ${{ env.src_path }}/arch/arm64/boot/dts/rockchip/rk3566-lckfb-tspi.dtb
          echo "复制dtb到armbian_boot路径"
          cp -a   ${{ env.src_path }}/arch/arm64/boot/dts/rockchip/*.dtb   ${{ env.dtb_path }}/dtb/rockchip
          cd ${{ env.dtb_path }}/dtb/rockchip
          echo  "反编译"
          dtc -I dtb -O dts  rk3566-lckfb-tspi.dtb  -o file.dts
          echo "删除未修改的dtb"
          rm -rf rk3566-lckfb-tspi.dtb
          echo "修改dts"
          sed -i '/mmcblk0p3/d'  file.dts
          echo "重新编译dtb"
          dtc -I dts -O dtb file.dts -o rk3566-lckfb-tspi.dtb
          echo "删除未修改的dts"
          rm -rf file.dts
          cd ${{ env.dtb_path }}/
          tar -zcvf dtb-${{ env.kernel_main_version }}.tar.gz  dtb

      - name:  generate_uinitrd 
        run: |
          rm -rf /usr/src/*
          rm -rf /lib/modules/*
          mv ${{ env.src_path }}/linux-headers-${{ env.kernel_main_version }}   /usr/src/
          mv ${{ env.modules_path }}/${{ env.kernel_main_version }}    /lib/modules/
          
          if [[ !-d /boot ]];then
            mkdir -p /boot
          else
            rm -rf /boot/*
          fi
          cp -a ${{ env.src_path }}/arch/arm64/boot/Image   /boot/vmlinuz-${{ env.kernel_main_version }}
          cp -a ${{ env.src_path }}/System.map   /boot/System.map-${{ env.kernel_main_version }}
          cp -a ${{ env.src_path }}/.config     /boot/config-${{ env.kernel_main_version }} 

          if [[ -f ${{ env.src_path }}/zImage ]];then
            cp -a ${{ env.src_path }}/zImage  /boot/zImage-${{ env.kernel_main_version }}
          fi

          cd  /boot
          [[ -f "${{env.initramfs_conf}}" ]] && sed -i "s|^update_initramfs=.*|update_initramfs=yes|g" ${{env.initramfs_conf}}
          echo "制作initrd.ing、uInitrd"
          update-initramfs -c -k ${{ env.kernel_main_version }}
          tar -zcvf armbian-boot-${{ env.kernel_main_version }}.tar.gz   * 

      - name: Build  armbian_boot
        run: |
          mkdir -p ${{ env.armbian_path }}
          mv /boot/armbian-boot-${{ env.kernel_main_version }}.tar.gz   .  
          
      - name: Upload Kernel to Release  ${{ github.event.inputs.source_tag }}
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.event.inputs.target_tag }}
          name: "Kernel ${{ env.kernel_main_version }}"
          
          artifacts: |
            ${{ env.src_path }}/rk3566-lckfb-tspi-boot-${{ env.kernel_main_version }}.img
            ${{ env.modules_path }}/${{ env.kernel_main_version }}-modules.tar.gz
            ${{ env.src_path }}/linux-headers-${{ env.kernel_main_version }}.tar.gz
            ${{ env.armbian_path }}/armbian-boot-${{ env.kernel_main_version }}.tar.gz
            ${{ env.dtb_path }}/dtb-${{ env.kernel_main_version }}.tar.gz
          body: |
            tag：  ${{ github.event.inputs.target_tag }}
            Kernel version: ${{ env.kernel_main_version }}
            tspi-ap6212
          draft: false
          prerelease: false
          allowUpdates: true
