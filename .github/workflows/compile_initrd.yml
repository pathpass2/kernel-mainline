name: Build Initrd Only

on:
  workflow_dispatch:
    inputs:
      source_run_id:
        description: "Source workflow run ID"
        required: true
        default: "16826209790"

permissions:
  contents: read
  actions: read

jobs:
  build_initrd:
    runs-on: ubuntu-22.04
    steps:
      # 第一步：检查源工作流是否存在
      - name: Verify source workflow run
        id: verify_run
        uses: actions/github-script@v6
        with:
          script: |
            try {
              const run = await github.rest.actions.getWorkflowRun({
                owner: 'pathpass2',
                repo: 'linux',
                run_id: ${{ github.event.inputs.source_run_id }}
              });
              console.log(`Found source workflow run: ${run.data.id}`);
              return true;
            } catch (error) {
              core.setFailed(`❌ Source workflow run not found: ${error.message}`);
              return false;
            }

      # 第二步：列出可用的artifacts
      - name: List available artifacts
        if: steps.verify_run.outcome == 'success'
        id: list_artifacts
        uses: actions/github-script@v6
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: 'pathpass2',
              repo: 'linux',
              run_id: ${{ github.event.inputs.source_run_id }}
            });
            
            if (artifacts.data.artifacts.length === 0) {
              core.setFailed('❌ No artifacts found in source workflow run');
            }
            
            console.log("Available artifacts:");
            artifacts.data.artifacts.forEach(artifact => {
              console.log(`- ${artifact.name} (ID: ${artifact.id}, Size: ${artifact.size_in_bytes} bytes)`);
            });
            
            // 优先查找包含kernel或build的artifact
            const preferredArtifact = artifacts.data.artifacts.find(a => 
              a.name.toLowerCase().includes('kernel') || 
              a.name.toLowerCase().includes('build')
            );
            
            const artifactName = preferredArtifact ? preferredArtifact.name : artifacts.data.artifacts[0].name;
            core.setOutput('artifact_name', artifactName);
            return artifactName;

      # 第三步：下载artifact
      - name: Download artifact
        if: steps.verify_run.outcome == 'success'
        id: download_artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ steps.list_artifacts.outputs.artifact_name }}
          path: kernel_temp

      # 第四步：验证下载的文件
      - name: Verify downloaded files
        if: steps.download_artifact.outcome == 'success'
        run: |
          echo "=== Downloaded files structure ==="
          find kernel_temp -type f -exec ls -lh {} \;
          
          # 检查常见内核文件
          if ! compgen -G "kernel_temp/vmlinuz-*" > /dev/null && \
             ! compgen -G "kernel_temp/System.map-*" > /dev/null && \
             ! compgen -G "kernel_temp/initrd-*" > /dev/null; then
            echo "::error::❌ No kernel files (vmlinuz, System.map, initrd) found in artifact"
            exit 1
          fi

      # 第五步：重新组织文件结构
      - name: Reorganize files
        if: steps.download_artifact.outcome == 'success'
        run: |
          # 自动检测内核版本
          KERNEL_VERSION=$(ls kernel_temp/vmlinuz-* 2>/dev/null | head -1 | sed 's|.*vmlinuz-||')
          if [ -z "$KERNEL_VERSION" ]; then
            KERNEL_VERSION=$(ls kernel_temp/System.map-* 2>/dev/null | head -1 | sed 's|.*System.map-||')
          fi
          
          if [ -z "$KERNEL_VERSION" ]; then
            echo "::error::❌ Could not determine kernel version from downloaded files"
            exit 1
          fi
          
          echo "Detected kernel version: $KERNEL_VERSION"
          
          # 创建目标目录
          mkdir -p $GITHUB_WORKSPACE/armbian_boot_files
          
          # 移动所有相关文件
          mv kernel_temp/vmlinuz-$KERNEL_VERSION $GITHUB_WORKSPACE/armbian_boot_files/ 2>/dev/null || true
          mv kernel_temp/System.map-$KERNEL_VERSION $GITHUB_WORKSPACE/armbian_boot_files/ 2>/dev/null || true
          mv kernel_temp/config-$KERNEL_VERSION $GITHUB_WORKSPACE/armbian_boot_files/ 2>/dev/null || true
          mv kernel_temp/initrd-$KERNEL_VERSION $GITHUB_WORKSPACE/armbian_boot_files/ 2>/dev/null || true
          
          # 设置环境变量
          echo "armbian_file_path=$GITHUB_WORKSPACE/armbian_boot_files" >> $GITHUB_ENV
          echo "kernel_main_version=$KERNEL_VERSION" >> $GITHUB_ENV

      # 第六步：最终验证
      - name: Verify final structure
        if: steps.download_artifact.outcome == 'success'
        run: |
          echo "=== Final file structure ==="
          ls -lh ${{ env.armbian_file_path }}
          
          if [ ! -f "${{ env.armbian_file_path }}/vmlinuz-${{ env.kernel_main_version }}" ] && \
             [ ! -f "${{ env.armbian_file_path }}/initrd-${{ env.kernel_main_version }}" ]; then
            echo "::error::❌ No kernel or initrd files found in final location"
            exit 1
          fi
          
          echo "✅ Initrd build environment prepared successfully"

          


      - name: Generate initrd.img
        run: |
          sudo apt-get update
          sudo apt-get install -y debootstrap qemu-user-static
          sudo apt-get install -y initramfs-tools  u-boot-tools
          mkdir -p ${{ env.src_path }}/chroot_dir
          mkdir -p ${{ env.src_path }}/lib/modules
          mkdir -p ${{ env.src_path }}/chroot_dir/usr/bin/
          mv ${{ env.armbian_file_path }}/${{ env.kernel_main_version }}  ${{ env.src_path }}/lib/modules
          sudo cp /usr/bin/qemu-aarch64-static ${{ env.src_path }}/chroot_dir/usr/bin/
          sudo cp /etc/resolv.conf ${{ env.src_path }}/chroot_dir/etc/
          sudo chroot ${{ env.src_path }}/chroot_dir bash -c "echo 'deb http://ports.ubuntu.com/ jammy main' > /etc/apt/sources.list"
          
          sudo debootstrap --arch=arm64 --variant=minbase jammy ${{ env.src_path }}/chroot_dir http://ports.ubuntu.com/
          
          sudo mount -t proc proc ${{ env.src_path }}/chroot_dir/proc
          sudo mount -t sysfs sys ${{ env.src_path }}/chroot_dir/sys
          sudo mount -o bind /dev ${{ env.src_path }}/chroot_dir/dev
          sudo mount -o bind ${{ env.src_path }}/lib/modules ${{ env.src_path }}/chroot_dir/lib/modules
          sudo chroot ${{ env.src_path }}/chroot_dir /bin/bash <<EOF
          apt-get update
          apt-get install -y apt-utils dialog locales  locale-gen en_US.UTF-8
          apt-get install -y initramfs-tools u-boot-tools
          
          mkdir -p /boot
          mkinitramfs -c xz -o /boot/initrd.img-${{ env.kernel_main_version }}  ${{ env.kernel_main_version }}
          mkimage -A arm64 -O linux -T ramdisk -C none -a 0 -e 0 -n uInitrd -d /boot/initrd.img-${{ env.kernel_main_version }} /boot/uInitrd-${{ env.kernel_main_version }}
          EOF
          
      - name: Clean up
        run: |
          sudo umount ${{ env.src_path }}/chroot_dir/dev
          sudo umount ${{ env.src_path }}/chroot_dir/proc
          sudo umount ${{ env.src_path }}/chroot_dir/sys
          ls -lh ${{ env.src_path }}/chroot_dir/boot/
          

