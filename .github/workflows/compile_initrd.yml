name: Build Initrd Only

on:
  workflow_dispatch:
    inputs:
      source_run_id:
        description: "Source workflow run ID"
        required: true
        default: "16826209790"

permissions:
  contents: read
  actions: read

jobs:
  build_initrd:
    runs-on: ubuntu-22.04
    steps:
      # 第一步：获取Artifact下载URL
      - name: Get artifact download URL
        id: get-artifact
        run: |
          response=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ inputs.source_run_id }}/artifacts")
          
          download_url=$(echo "$response" | jq -r '.artifacts[] | select(.name == "kernel-build") | .archive_download_url')
          echo "url=$download_url" >> $GITHUB_OUTPUT
          echo "Found download URL: $download_url"

      # 第二步：下载并验证ZIP文件
      - name: Download and extract artifact
        run: |
          mkdir -p kernel_temp
          curl -sL \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "${{ steps.get-artifact.outputs.url }}" \
            -o kernel_temp/artifact.zip
          
          # 验证ZIP文件完整性
          if ! unzip -t kernel_temp/artifact.zip; then
            echo "::error::Downloaded ZIP file is corrupted"
            exit 1
          fi
          
          unzip -o kernel_temp/artifact.zip -d kernel_temp/
          rm kernel_temp/artifact.zip

      # 第三步：验证文件结构
      - name: Verify files
        run: |
          echo "Downloaded files:"
          find kernel_temp -type f
          
          if [ ! -f "kernel_temp/armbian_boot_files/vmlinuz-6.16.0" ]; then
            echo "::error::Kernel file not found in expected location"
            exit 1
          fi

      # 第四步：设置环境路径
      - name: Setup paths
        run: |
          echo "armbian_file_path=$GITHUB_WORKSPACE/armbian_boot_files" >> $GITHUB_ENV
          mkdir -p ${{ env.armbian_file_path }}
          cp -r kernel_temp/armbian_boot_files/* ${{ env.armbian_file_path }}/

          


      - name: Generate initrd.img
        run: |
          sudo apt-get update
          sudo apt-get install -y debootstrap qemu-user-static
          sudo apt-get install -y initramfs-tools  u-boot-tools
          mkdir -p ${{ env.src_path }}/chroot_dir
          mkdir -p ${{ env.src_path }}/lib/modules
          mkdir -p ${{ env.src_path }}/chroot_dir/usr/bin/
          mv ${{ env.armbian_file_path }}/${{ env.kernel_main_version }}  ${{ env.src_path }}/lib/modules
          sudo cp /usr/bin/qemu-aarch64-static ${{ env.src_path }}/chroot_dir/usr/bin/
          sudo cp /etc/resolv.conf ${{ env.src_path }}/chroot_dir/etc/
          sudo chroot ${{ env.src_path }}/chroot_dir bash -c "echo 'deb http://ports.ubuntu.com/ jammy main' > /etc/apt/sources.list"
          
          sudo debootstrap --arch=arm64 --variant=minbase jammy ${{ env.src_path }}/chroot_dir http://ports.ubuntu.com/
          
          sudo mount -t proc proc ${{ env.src_path }}/chroot_dir/proc
          sudo mount -t sysfs sys ${{ env.src_path }}/chroot_dir/sys
          sudo mount -o bind /dev ${{ env.src_path }}/chroot_dir/dev
          sudo mount -o bind ${{ env.src_path }}/lib/modules ${{ env.src_path }}/chroot_dir/lib/modules
          sudo chroot ${{ env.src_path }}/chroot_dir /bin/bash <<EOF
          apt-get update
          apt-get install -y apt-utils dialog locales  locale-gen en_US.UTF-8
          apt-get install -y initramfs-tools u-boot-tools
          
          mkdir -p /boot
          mkinitramfs -c xz -o /boot/initrd.img-${{ env.kernel_main_version }}  ${{ env.kernel_main_version }}
          mkimage -A arm64 -O linux -T ramdisk -C none -a 0 -e 0 -n uInitrd -d /boot/initrd.img-${{ env.kernel_main_version }} /boot/uInitrd-${{ env.kernel_main_version }}
          EOF
          
      - name: Clean up
        run: |
          sudo umount ${{ env.src_path }}/chroot_dir/dev
          sudo umount ${{ env.src_path }}/chroot_dir/proc
          sudo umount ${{ env.src_path }}/chroot_dir/sys
          ls -lh ${{ env.src_path }}/chroot_dir/boot/
          

