name: compile_initrd

on:
  workflow_dispatch:
    inputs:
      workflow_name:
        description: "ap6212_armbian-6.16.0-boot.yml"
        required: true
        default: "ap6212_armbian-6.16.0-boot.yml"
      run_id:
        description: "源工作流的运行ID"
        required: true
        default: "16826209790"
      kernel_version:
        description: "完整内核版本号(如6.1.0)"
        required: true
        default: "6.16.0"

env:
  src_path: /home/runner/work/linux/linux
  modules_path: /home/runner/work/linux/linux/modules/lib/modules
  artifacts_path: ${{ github.workspace }}/artifacts
  kernel_main_version: "6.16.0"
  kernel_files: "config vmlinuz System.map"

permissions:
  actions: read
  contents: write

jobs:
  download-and-build:
    runs-on: ubuntu-latest
    steps:
      - name: 设置环境变量
        run: |
          echo "armbian_path=${{ env.src_path }}/armbian_boot" >> $GITHUB_ENV
          echo "dtb_path=${{ env.src_path }}/dtbs" >> $GITHUB_ENV
          echo "armbian_file_path=${{ env.src_path }}/armbian_boot_files" >> $GITHUB_ENV
          mkdir -p ${{ env.armbian_path }}
          mkdir -p ${{ env.dtb_path }}
          mkdir -p ${{ env.armbian_file_path }}

      - name: 下载内核文件
        uses: actions/download-artifact@v4
        with:
          name: kernel-artifacts
          path: ${{ env.artifacts_path }}
          run_id: ${{ inputs.run_id }}

      - name: 验证下载的文件
        run: |
          echo "已下载的内核文件:"
          ls -lh ${{ env.artifacts_path }}
          
          for file in ${{ env.kernel_files }}; do
            if [ ! -f "${{ env.artifacts_path }}/$file-${{ env.kernel_main_version }}" ]; then
              echo "::error::缺少文件: $file-${{ env.kernel_main_version }}"
              exit 1
            fi
          done

          # 复制内核文件到armbian目录
          cp ${{ env.artifacts_path }}/config-${{ env.kernel_main_version }} ${{ env.armbian_file_path }}/
          cp ${{ env.artifacts_path }}/System.map-${{ env.kernel_main_version }} ${{ env.armbian_file_path }}/
          cp ${{ env.artifacts_path }}/vmlinuz-${{ env.kernel_main_version }} ${{ env.armbian_file_path }}/

          


      - name: Generate initrd.img
        run: |
          sudo apt-get update
          sudo apt-get install -y debootstrap qemu-user-static
          sudo apt-get install -y initramfs-tools  u-boot-tools
          mkdir -p ${{ env.src_path }}/chroot_dir
          mkdir -p ${{ env.src_path }}/lib/modules
          mkdir -p ${{ env.src_path }}/chroot_dir/usr/bin/
          mv ${{ env.armbian_file_path }}/${{ env.kernel_main_version }}  ${{ env.src_path }}/lib/modules
          sudo cp /usr/bin/qemu-aarch64-static ${{ env.src_path }}/chroot_dir/usr/bin/
          sudo cp /etc/resolv.conf ${{ env.src_path }}/chroot_dir/etc/
          sudo chroot ${{ env.src_path }}/chroot_dir bash -c "echo 'deb http://ports.ubuntu.com/ jammy main' > /etc/apt/sources.list"
          
          sudo debootstrap --arch=arm64 --variant=minbase jammy ${{ env.src_path }}/chroot_dir http://ports.ubuntu.com/
          
          sudo mount -t proc proc ${{ env.src_path }}/chroot_dir/proc
          sudo mount -t sysfs sys ${{ env.src_path }}/chroot_dir/sys
          sudo mount -o bind /dev ${{ env.src_path }}/chroot_dir/dev
          sudo mount -o bind ${{ env.src_path }}/lib/modules ${{ env.src_path }}/chroot_dir/lib/modules
          sudo chroot ${{ env.src_path }}/chroot_dir /bin/bash <<EOF
          apt-get update
          apt-get install -y apt-utils dialog locales  locale-gen en_US.UTF-8
          apt-get install -y initramfs-tools u-boot-tools
          
          mkdir -p /boot
          mkinitramfs -c xz -o /boot/initrd.img-${{ env.kernel_main_version }}  ${{ env.kernel_main_version }}
          mkimage -A arm64 -O linux -T ramdisk -C none -a 0 -e 0 -n uInitrd -d /boot/initrd.img-${{ env.kernel_main_version }} /boot/uInitrd-${{ env.kernel_main_version }}
          EOF
          
      - name: Clean up
        run: |
          sudo umount ${{ env.src_path }}/chroot_dir/dev
          sudo umount ${{ env.src_path }}/chroot_dir/proc
          sudo umount ${{ env.src_path }}/chroot_dir/sys
          ls -lh ${{ env.src_path }}/chroot_dir/boot/
          

