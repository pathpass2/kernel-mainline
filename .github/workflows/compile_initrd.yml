name: compile_initrd

on:
  workflow_run:
    workflows: ["Build ap6212_armbian-6.16.0-boot"]  # 前一个workflow的名称
    types: [completed]

env:
  # 继承前一个workflow的环境变量
  ARCH: arm64
  src_path: /home/runner/work/linux/linux
  modules_path: /home/runner/work/linux/linux/modules/lib/modules
  armbian_path: /home/runner/work/linux/linux/armbian_boot
  dtb_path: /home/runner/work/linux/linux/dtbs
  armbian_file_path: /home/runner/work/linux/linux/armbian_boot_files

jobs:
  download_artifacts:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download artifacts from previous workflow
        uses: actions/download-artifact@v4
        with:
          name: kernel-build
          path: ${{ env.armbian_file_path }}

      - name: List downloaded files
        run: |
          echo "下载的文件列表："
          ls -lh ${{ env.armbian_file_path }}
          echo "模块目录内容："
          ls -lh ${{ env.armbian_file_path }}/${{ env.kernel_main_version }}

      - name: Setup environment
        run: |
          # 从前一个workflow的运行日志中提取内核版本
          echo "kernel_main_version=$(curl -s https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id }}/jobs | jq -r '.jobs[0].steps[] | select(.name == "Get Kernel Version") | .outputs.kernel_main_version')" >> $GITHUB_ENV
          echo "内核版本: ${{ env.kernel_main_version }}"

      - name: Verify files
        run: |
          echo "验证下载的文件："
          [ -f "${{ env.armbian_file_path }}/vmlinuz-${{ env.kernel_main_version }}" ] && echo "vmlinuz 存在" || echo "vmlinuz 不存在"
          [ -f "${{ env.armbian_file_path }}/System.map-${{ env.kernel_main_version }}" ] && echo "System.map 存在" || echo "System.map 不存在"
          [ -f "${{ env.armbian_file_path }}/config-${{ env.kernel_main_version }}" ] && echo "config 存在" || echo "config 不存在"
          [ -d "${{ env.armbian_file_path }}/${{ env.kernel_main_version }}" ] && echo "模块目录存在" || echo "模块目录不存在"

      - name: Upload to release
        if: success()
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ env.armbian_file_path }}/vmlinuz-${{ env.kernel_main_version }}
            ${{ env.armbian_file_path }}/System.map-${{ env.kernel_main_version }}
            ${{ env.armbian_file_path }}/config-${{ env.kernel_main_version }}
            ${{ env.armbian_path }}/*.tar.gz
          tag_name: ${{ env.kernel_main_version }}
          draft: false
          prerelease: false
          


      - name: Generate initrd.img
        run: |
          sudo apt-get update
          sudo apt-get install -y debootstrap qemu-user-static
          sudo apt-get install -y initramfs-tools  u-boot-tools
          mkdir -p ${{ env.src_path }}/chroot_dir
          mkdir -p ${{ env.src_path }}/lib/modules
          mkdir -p ${{ env.src_path }}/chroot_dir/usr/bin/
          mv ${{ env.armbian_file_path }}/${{ env.kernel_main_version }}  ${{ env.src_path }}/lib/modules
          sudo cp /usr/bin/qemu-aarch64-static ${{ env.src_path }}/chroot_dir/usr/bin/
          sudo cp /etc/resolv.conf ${{ env.src_path }}/chroot_dir/etc/
          sudo chroot ${{ env.src_path }}/chroot_dir bash -c "echo 'deb http://ports.ubuntu.com/ jammy main' > /etc/apt/sources.list"
          
          sudo debootstrap --arch=arm64 --variant=minbase jammy ${{ env.src_path }}/chroot_dir http://ports.ubuntu.com/
          
          sudo mount -t proc proc ${{ env.src_path }}/chroot_dir/proc
          sudo mount -t sysfs sys ${{ env.src_path }}/chroot_dir/sys
          sudo mount -o bind /dev ${{ env.src_path }}/chroot_dir/dev
          sudo mount -o bind ${{ env.src_path }}/lib/modules ${{ env.src_path }}/chroot_dir/lib/modules
          sudo chroot ${{ env.src_path }}/chroot_dir /bin/bash <<EOF
          apt-get update
          apt-get install -y apt-utils dialog locales  locale-gen en_US.UTF-8
          apt-get install -y initramfs-tools u-boot-tools
          
          mkdir -p /boot
          mkinitramfs -c xz -o /boot/initrd.img-${{ env.kernel_main_version }}  ${{ env.kernel_main_version }}
          mkimage -A arm64 -O linux -T ramdisk -C none -a 0 -e 0 -n uInitrd -d /boot/initrd.img-${{ env.kernel_main_version }} /boot/uInitrd-${{ env.kernel_main_version }}
          EOF
          
      - name: Clean up
        run: |
          sudo umount ${{ env.src_path }}/chroot_dir/dev
          sudo umount ${{ env.src_path }}/chroot_dir/proc
          sudo umount ${{ env.src_path }}/chroot_dir/sys
          ls -lh ${{ env.src_path }}/chroot_dir/boot/
          

