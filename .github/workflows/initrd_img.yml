name: compile_initrd

on:
  workflow_dispatch:
    inputs:
      first_workflow_run_id:
        description: "16829068004"
        required: true
      kernel_version:
        description: "6.10.0"
        required: true

jobs:
  build_initrd:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set kernel version
        run: |
          echo "kernel_main_version=${{ github.event.inputs.kernel_version }}" >> $GITHUB_ENV
          echo "使用指定的内核版本: ${{ github.event.inputs.kernel_version }}"

      - name: Download artifact from first workflow
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # 通过 GitHub API 获取 Artifact 下载地址
          ARTIFACT_URL=$(curl -s \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.event.inputs.first_workflow_run_id }}/artifacts" \
            | jq -r '.artifacts[] | select(.name == "kernel-build") | .archive_download_url')

          if [ -z "$ARTIFACT_URL" ]; then
            echo "错误：找不到 kernel-build Artifact"
            exit 1
          fi

          # 下载并解压 Artifact
          curl -L -o kernel-build.zip \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            "$ARTIFACT_URL"
          unzip kernel-build.zip -d kernel_artifacts
          ls -lh kernel_artifacts/

      - name: Verify kernel modules
        run: |
          if [ ! -d "kernel_artifacts/${{ env.kernel_main_version }}" ]; then
            echo "错误：内核模块目录不存在: kernel_artifacts/${{ env.kernel_main_version }}"
            exit 1
          fi
      # 后续步骤保持不变（准备目录、构建 initrd 等）
      - name: Prepare directories
        run: |
          sudo mkdir -p /mnt/chroot/lib/modules
          sudo cp -a kernel_artifacts/${{ env.kernel_main_version }} /mnt/chroot/lib/modules/
          


      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y debootstrap qemu-user-static initramfs-tools u-boot-tools

      - name: Setup base system
        run: |
          sudo debootstrap --arch=arm64 --variant=minbase jammy /mnt/chroot http://ports.ubuntu.com/
          
          # 准备 chroot 环境
          sudo cp /usr/bin/qemu-aarch64-static /mnt/chroot/usr/bin/
          sudo cp /etc/resolv.conf /mnt/chroot/etc/
          
          # 挂载必要的文件系统
          sudo mount -t proc proc /mnt/chroot/proc
          sudo mount -t sysfs sys /mnt/chroot/sys
          sudo mount -o bind /dev /mnt/chroot/dev

      - name: Build initrd in chroot
        run: |
          sudo chroot /mnt/chroot /bin/bash <<EOF
          echo "deb http://ports.ubuntu.com/ jammy main" > /etc/apt/sources.list
          apt-get update
          apt-get install -y apt-utils dialog locales initramfs-tools u-boot-tools
          locale-gen en_US.UTF-8
          
          mkdir -p /boot
          mkinitramfs -o /boot/initrd.img-${{ env.kernel_main_version }} ${{ env.kernel_main_version}}
          mkimage -A arm64 -O linux -T ramdisk -C none -a 0 -e 0 -n uInitrd \
            -d /boot/initrd.img-${{ env.kernel_main_version }} /boot/uInitrd-${{ env.kernel_main_version }}
          EOF

      - name: Collect results
        run: |
          sudo mkdir -p initrd_results
          sudo cp /mnt/chroot/boot/initrd.img-${{ env.kernel_main_version }} initrd_results/
          sudo cp /mnt/chroot/boot/uInitrd-${{ env.kernel_main_version }} initrd_results/
          ls -lh initrd_results/

      - name: Clean up
        run: |
          sudo umount /mnt/chroot/dev
          sudo umount /mnt/chroot/proc
          sudo umount /mnt/chroot/sys
          sudo rm -rf /mnt/chroot

      - name: Upload initrd artifacts
        uses: actions/upload-artifact@v4
        with:
          name: initrd-build-${{ env.kernel_main_version }}
          path: initrd_results/
          retention-days: 3
